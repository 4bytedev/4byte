x-logging: &default-logging
  driver: 'json-file'
  options:
    max-size: "50m"
    max-file: "10"
    compress: "true"
x-healthcheck: &default-healthcheck
  interval: 20s
  retries: 5
  timeout: 3s
services:
    php-backend:
        profiles:
            - app
        container_name: php-backend
        image: 4bytedev/4byte:latest
        build:
            context: .
            args:
                - APP_ENV='${APP_ENV}'
                - WWWUSER=${HOST_UID:-1000}
                - WWWGROUP=${HOST_GID:-1000}
        user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
        ports:
            - 80:8000
        volumes:
            - './.env:/var/www/html/.env'
            - './storage/app/public:/var/www/html/storage/app/public'
            - './storage/logs:/var/www/html/storage/logs'
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        security_opt:
            - no-new-privileges:true
        networks:
            - stack
        healthcheck:
            test: ["CMD-SHELL", "curl --fail http://localhost:8000 || exit 1"]
            <<: *default-healthcheck
        logging:
            <<: *default-logging
        restart: unless-stopped
    php-backend-development:
        profiles:
            - development
        build: .
        command: ["php", "artisan", "serve", "--host=0.0.0.0", "--port=8000"]
        ports:
            - "8000:8000"
    redis:
        profiles:
            - production
        container_name: redis
        image: redis:alpine
        volumes:
            - stack-redis:/data
            - ./deployment/redis.conf:/usr/local/etc/redis/redis.conf
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        command: [
            "redis-server",
            "/usr/local/etc/redis/redis.conf",
            "--requirepass", "${REDIS_PASSWORD}",
            "--maxmemory", "${REDIS_MAXMEMORY:-2gb}",
            "--maxmemory-policy", "allkeys-lru",
            "--save", "900 1",
            "--save", "300 10",
            "--save", "60 10000"
        ]
        security_opt:
            - no-new-privileges:true
        networks:
            - stack
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            <<: *default-healthcheck
        logging:
            <<: *default-logging
        restart: unless-stopped
        deploy:
            resources:
                limits:
                    memory: 2.5G
    pgsql:
        profiles:
            - app
            - development
        container_name: pgsql
        image: 'postgres:${DB_VERSION:-17}-alpine'
        volumes:
            - stack-pgsql:/var/lib/postgresql/data
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        security_opt:
            - no-new-privileges:true
        environment:
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD}'
        networks:
            - stack
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
            <<: *default-healthcheck
        logging:
            <<: *default-logging
        restart: unless-stopped
        labels:
            docker-volume-backup.stop-during-backup: true
            docker-volume-backup.archive-pre: /bin/sh -c 'pg_dump -U ${DB_USERNAME} -F t ${DB_DATABASE} > /backup/${DB_DATABASE}-database.tar'
    mysql:
        profiles:
          - production
        container_name: gorse-mysql
        image: mysql/mysql-server:${MYSQL_VERSION:-8.0}
        volumes:
            - stack-mysql:/var/lib/mysql
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        security_opt:
            - no-new-privileges:true
        environment:
            MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
            MYSQL_DATABASE: '${MYSQL_DATABASE}'
            MYSQL_USER: '${MYSQL_USER}'
            MYSQL_PASSWORD: '${MYSQL_PASSWORD}'
        networks:
            - gorse
        healthcheck:
            test: ["CMD-SHELL", "mysqladmin ping -h localhost -u ${MYSQL_USER} -p${MYSQL_PASSWORD}"]
            <<: *default-healthcheck
        logging:
            <<: *default-logging
        restart: unless-stopped
        labels:
            docker-volume-backup.stop-during-backup: true
            docker-volume-backup.archive-pre: /bin/sh -c 'mysqldump -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} > /backup/${MYSQL_DATABASE}-database.sql'
    gorse-worker:
        profiles:
          - production
        container_name: gorse-worker
        image: zhenghaoz/gorse-worker:nightly
        depends_on:
            - gorse-master
        ports:
            - 8089:8089
        command: >
            --master-host gorse-master --master-port 8086 
            --http-host 0.0.0.0 --http-port 8089
            --log-path /var/log/gorse/worker.log 
            --cache-path /var/lib/gorse/worker_cache.data
        volumes:
            - stack-gorse-worker:/var/lib/gorse
        security_opt:
            - no-new-privileges:true
        networks:
            - gorse
        logging:
            <<: *default-logging
        restart: unless-stopped
    gorse-server:
        profiles:
          - production
        container_name: gorse-server
        image: zhenghaoz/gorse-server:nightly
        depends_on:
            - gorse-master
        ports:
            - 8087:8087
        command: >
            --master-host gorse-master --master-port 8086
            --http-host 0.0.0.0 --http-port 8087
            --log-path /var/log/gorse/server.log
            --cache-path /var/lib/gorse/server_cache.data
        volumes:
            - stack-gorse-server:/var/lib/gorse
        security_opt:
            - no-new-privileges:true
        networks:
            - stack
            - gorse
        logging:
            <<: *default-logging
        restart: unless-stopped
    gorse-master:
        profiles:
          - production
        container_name: gorse-master
        image: zhenghaoz/gorse-master:nightly
        depends_on:
            - mysql
            - redis
        ports:
            - 8086:8086
            - 8088:8088
        environment:
            GORSE_CACHE_STORE: "redis://:${REDIS_PASSWORD}@redis:6379"
            GORSE_DATA_STORE: "mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@tcp(mysql:3306)/${MYSQL_DATABASE}"
        command: >
            -c /etc/gorse/config.toml
            --log-path /var/log/gorse/master.log 
            --cache-path /var/lib/gorse/master_cache.data
        volumes:
            - ./deployment/gorse.config.toml:/etc/gorse/config.toml
            - stack-gorse-master:/var/lib/gorse
        security_opt:
            - no-new-privileges:true
        networks:
            - stack
            - gorse
        logging:
            <<: *default-logging
        restart: unless-stopped
    backup:
        profiles:
            - production
        image: offen/docker-volume-backup:v2
        user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
        environment:
            BACKUP_FILENAME: backup-%Y-%m-%dT%H-%M-%S.tar.gz
            BACKUP_PRUNING_PREFIX: backup-
            BACKUP_CRON_EXPRESSION: "0 2 * * *" # run every day at 2am
            BACKUP_RETENTION_DAYS: '7'
            AWS_ACCESS_KEY_ID: '${STORAGE_ACCESS_KEY_ID}'
            AWS_SECRET_ACCESS_KEY: '${STORAGE_SECRET_ACCESS_KEY}'
            AWS_S3_BUCKET_NAME: '${STORAGE_BUCKET}'
            STORAGE_ENDPOINT: '${STORAGE_ENDPOINT}'
        entrypoint: >
            sh -c "
            export AWS_ENDPOINT=$${STORAGE_ENDPOINT#https://} &&
            exec /usr/bin/backup -foreground
            "
        depends_on:
            pgsql:
                condition: service_healthy
        volumes:
            - stack-pgsql:/backup/pgsql:ro
            - stack-mysql:/backup/mysql:ro
            - ../backup/volumes:/archive
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro
        security_opt:
            - no-new-privileges:true
        logging:
            <<: *default-logging
        restart: unless-stopped

volumes:
  stack-redis:
  stack-pgsql:
  stack-mysql:
  stack-gorse-worker:
  stack-gorse-server:
  stack-gorse-master:

networks:
  stack:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
  gorse:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450